<?phprequire('Libs/Smarty/Smarty.class.php');class LMVC_SmartyRenderer extends ViewRenderer{			private $_smarty;	private static $instance; 			private function __construct(){}	final public static function getInstance(){		if (!isset(self::$instance)) {			$c = __CLASS__;			self::$instance = new $c;		}		return self::$instance;	}			public function init(){				$this->_smarty = new Smarty();		$this->_smarty->debugging = false;		$this->_smarty->caching = false; 		$this->_smarty->compile_check = false;		//$this->_smarty->force_compile = false;				$this->_smarty->compile_dir = LMVC_Front::getInstance()->getApplicationDirectory() ."/extras/templates_c";		$this->_smarty->cache_dir = LMVC_Front::getInstance()->getApplicationDirectory() ."/extras/templates_cache";					$this->_smarty->register_function("days_ago", array($this,'daysAgo')); 			$this->_smarty->register_function("date_format", array($this,'dateFormat'));		$this->_smarty->register_function("filter_display_callback", array($this,'leadtypeFilterDisplay'));				$this->_smarty->register_function("company_status_label", array($this,'getCompanyStatusLabel'));				$this->_smarty->register_function("company_status_label_css_class", array($this,'getCompanyStatusLabelCssClassName'));			}			public function leadtypeFilterDisplay($params) {						$displayCallbackName = $params['filterData']['displayCallback'];				if(function_exists($displayCallbackName)) {						return call_user_func($displayCallbackName, $params);					} else {						$html = '<div class="form-group"><div class="col-md-5">';				$html .='<label class="control-label text-left lt-filter-fl"><b>'.$params['filterData']['filterLabel'].':</b></label>';				$html .= '<label class="control-label text-left lt-filter-sd text-danger"> Display callback function is not registered</label>';			$html .='</div></div>';									return $html;					}			}			public function getCompanyStatusLabel($params)	{						if(function_exists('getCompanyStatusLabel')) {						$slug = $params['slug'];			return getCompanyStatusLabel($slug); // defined in function.php		}		else 		{			return '';		}		}		public function getCompanyStatusLabelCssClassName($params)	{		if(function_exists('getCompanyStatusLabelCssClassName')) {						$slug = $params['slug'];			return getCompanyStatusLabelCssClassName($slug); // defined in function.php		}		else		{			return '';		}	} 		public function setCaching($_mode)	{		$this->_smarty->force_compile = !$_mode;				$this->_smarty->caching = $_mode;	}		public function clearCache()	{		$this->_smarty->clear_all_cache();	}		public function renderView(){				$this->_smarty->template_dir = $this->getViewDir();					$viewVars = $this->getViewVars();		foreach($viewVars as $var=>$val){			$this->_smarty->assign($var,$val);					}					return $this->_smarty->fetch($this->getViewFile());						}	public function renderLayout($_viewContent)	{		$this->_smarty->template_dir = $this->getLayoutDir();		$this->_smarty->assign('view_content',$_viewContent);				return $this->_smarty->fetch($this->getLayout());	}	public function renderViewFragment($_viewFragmentDir, $_viewFragmentFile, $_viewFragmentVars)
	{
		$this->_smarty->template_dir = $_viewFragmentDir;
		$viewVars = $_viewFragmentVars;
		foreach($viewVars as $var=>$val){
			$this->_smarty->assign($var,$val);
		}
		return $this->_smarty->fetch($_viewFragmentFile);
	
	}			public function getRenderer()	{		return $this->_smarty;	}		public function registerHelper($_helper)	{	}		public function daysAgo($params)	{		$time = strtotime($params['date_time']);				$periods = array("second", "minute", "hour", "day", "week", "month", "year", "decade");		$lengths = array("60","60","24","7","4.35","12","10");		$now = time();		$difference     = $now - $time;		$tense         = "ago";		for($j = 0; $difference >= $lengths[$j] && $j < count($lengths)-1; $j++) {			$difference /= $lengths[$j];		}		$difference = round($difference);		if($difference != 1) {			$periods[$j].= "s";		}		return "$difference $periods[$j] ago ";	}		public function dateFormat($params)	{					$time = strtotime($params['date_time']);		return date($params['format'],$time); 			}				}?>